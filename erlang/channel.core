module 'channel' ['channel'/0,
		  'channel'/1,
		  'close'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'recv'/1,
		  'send'/2,
		  'test'/0,
		  'test'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[99|[104|[97|[110|[110|[101|[108|[46|[101|[114|[108]]]]]]]]]]],1}]]
'channel'/0 =
    %% Line 5
    fun () ->
	call 'erlang':'spawn'
	    ('channel', 'channel', [[]])
'channel'/1 =
    %% Line 7
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 8
	      receive
		%% Line 9
		<'close'> when 'true' ->
		    'closed'
		%% Line 10
		<{'recv',PID}> when 'true' ->
		    apply 'channel'/1
			([PID|[]])
	      after 'infinity' ->
		'true'
	  %% Line 12
	  <[X|Xs]> when 'true' ->
	      %% Line 13
	      receive
		%% Line 14
		<'close'> when 'true' ->
		    'close'
		%% Line 15
		<{'send',Msg}> when 'true' ->
		    let <_1> =
			call 'erlang':'self'
			    ()
		    in  do  call 'erlang':'!'
				(X, {_1,Msg})
			    apply 'channel'/1
				(Xs)
		%% Line 16
		<{'recv',PID}> when 'true' ->
		    let <_2> =
			[X|call 'erlang':'++'
			       (Xs, [PID|[]])]
		    in  apply 'channel'/1
			    (_2)
	      after 'infinity' ->
		'true'
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'channel',1}}] )
	    -| ['compiler_generated'] )
	end
'recv'/1 =
    %% Line 19
    fun (_0) ->
	let <_1> =
	    call %% Line 20
		 'erlang':%% Line 20
			  'self'
		()
	in  do  %% Line 20
		call 'erlang':'!'
		    (_0, {'recv',_1})
		%% Line 21
		receive
		  <{_3,Msg}>
		      when call 'erlang':'=:='
			    (_3,
			     _0) ->
		      Msg
		after 'infinity' ->
		  'true'
'send'/2 =
    %% Line 23
    fun (_0,_1) ->
	call 'erlang':'!'
	    (_0, {'send',_1})
'close'/1 =
    %% Line 25
    fun (_0) ->
	call 'erlang':'!'
	    (_0, 'close')
'test'/0 =
    %% Line 27
    fun () ->
	let <Channel> =
	    apply %% Line 28
		  'channel'/0
		()
	in  do  %% Line 29
		apply 'send'/2
		    (Channel, [104|[101|[108|[108|[111]]]]])
		do  %% Line 30
		    call 'timer':'sleep'
			(500)
		    do  %% Line 31
			call 'erlang':'spawn'
			    ('channel', 'test', [Channel|[]])
			do  %% Line 32
			    call 'timer':'sleep'
				(500)
			    do  %% Line 33
				apply 'send'/2
				    (Channel, [119|[111|[114|[108|[100]]]]])
				do  %% Line 34
				    call 'timer':'sleep'
					(500)
				    %% Line 35
				    apply 'close'/1
					(Channel)
'test'/1 =
    %% Line 37
    fun (_0) ->
	let <_1> =
	    apply %% Line 38
		  'recv'/1
		(_0)
	in  do  %% Line 38
		call 'io':'format'
		    ([82|[101|[99|[118|[58|[32|[126|[112|[126|[110]]]]]]]]]], [_1|[]])
		let <_2> =
		    apply %% Line 39
			  'recv'/1
			(_0)
		in  %% Line 39
		    call 'io':'format'
			([82|[101|[99|[118|[58|[32|[126|[112|[126|[110]]]]]]]]]], [_2|[]])
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('channel')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('channel', _0)
end