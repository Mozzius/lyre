-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 27 contains 1 shift/reduce conflicts.
state 28 contains 1 shift/reduce conflicts.
state 51 contains 14 reduce/reduce conflicts.
state 76 contains 2 shift/reduce conflicts.
state 77 contains 1 shift/reduce conflicts and 2 reduce/reduce conflicts.
state 78 contains 6 shift/reduce conflicts and 3 reduce/reduce conflicts.
state 79 contains 6 shift/reduce conflicts and 3 reduce/reduce conflicts.
state 80 contains 6 shift/reduce conflicts and 3 reduce/reduce conflicts.
state 81 contains 6 shift/reduce conflicts and 3 reduce/reduce conflicts.
state 82 contains 6 shift/reduce conflicts and 3 reduce/reduce conflicts.
state 83 contains 6 shift/reduce conflicts and 3 reduce/reduce conflicts.
state 84 contains 12 reduce/reduce conflicts.
state 85 contains 12 reduce/reduce conflicts.
state 86 contains 12 reduce/reduce conflicts.
state 87 contains 14 reduce/reduce conflicts.
state 88 contains 14 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_program -> Program                          (0)
	Program -> Function nl OptNL Program               (1)
	Program -> Function nl OptNL                       (2)
	Program -> Function                                (3)
	Block -> Expression                                (4)
	Block -> '{' OptNL OptStatements '}'               (5)
	OptStatements -> Statements                        (6)
	OptStatements ->                                   (7)
	Statements -> Statement nl OptNL Statements        (8)
	Statements -> Statement nl OptNL                   (9)
	Statements -> Statement                            (10)
	Statement -> Assignment                            (11)
	Statement -> return Expression                     (12)
	Statement -> Function                              (13)
	Statement -> If                                    (14)
	Statement -> Expression                            (15)
	Type -> intType                                    (16)
	Type -> stringType                                 (17)
	Type -> boolType                                   (18)
	Type -> channelType Type                           (19)
	Type -> func TypeList OptReturnType                (20)
	TypeList -> Type ',' TypeList                      (21)
	TypeList -> Type                                   (22)
	TypeList ->                                        (23)
	OptReturnType -> '->' Type                         (24)
	OptReturnType ->                                   (25)
	OptType -> ':' Type                                (26)
	OptType ->                                         (27)
	Assignment -> let var OptType '=' Expression       (28)
	If -> if '(' Expression ')' Block else If          (29)
	If -> if '(' Expression ')' Block else Block       (30)
	If -> if '(' Expression ')' Block                  (31)
	Function -> func funcName OptArguments ')' OptType Block   (32)
	OptArguments -> Arguments                          (33)
	OptArguments ->                                    (34)
	Arguments -> var ':' Type ',' Arguments            (35)
	Arguments -> var ':' Type                          (36)
	OptExprList -> ExprList                            (37)
	OptExprList ->                                     (38)
	ExprList -> Expression ',' ExprList                (39)
	ExprList -> Expression                             (40)
	Expression -> Expression '||' Expression           (41)
	Expression -> Conjunction                          (42)
	Conjunction -> Conjunction '&&' Conjunction        (43)
	Conjunction -> Equality                            (44)
	Equality -> Equality '==' Equality                 (45)
	Equality -> Equality '!=' Equality                 (46)
	Equality -> Comparison                             (47)
	Comparison -> Equality '<' Equality                (48)
	Comparison -> Equality '<=' Equality               (49)
	Comparison -> Equality '>' Equality                (50)
	Comparison -> Equality '>=' Equality               (51)
	Comparison -> Sum                                  (52)
	Sum -> Sum '+' Term                                (53)
	Sum -> Sum '-' Term                                (54)
	Sum -> Sum '~' Term                                (55)
	Sum -> Term                                        (56)
	Term -> Term '*' Factor                            (57)
	Term -> Term '/' Factor                            (58)
	Term -> Inversion                                  (59)
	Inversion -> '!' Inversion                         (60)
	Inversion -> Factor                                (61)
	Factor -> var                                      (62)
	Factor -> int                                      (63)
	Factor -> bool                                     (64)
	Factor -> stringLiteral                            (65)
	Factor -> '(' Expression ')'                       (66)
	Factor -> funcName OptExprList ')'                 (67)
	Factor -> Expression '::' Type                     (68)
	OptNL -> OptNL nl                                  (69)
	OptNL ->                                           (70)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet _ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	var            { TokenVar _ $$ }
	int            { TokenInt _ $$ }
	stringLiteral  { TokenStringLiteral _ $$ }
	bool           { TokenBoolean _ $$ }
	return         { TokenReturn _ }
	func           { TokenFunc _ }
	funcName       { TokenApp _ $$ }
	':'            { TokenColon _ }
	','            { TokenComma _ }
	'!'            { TokenNot _ }
	'='            { TokenAssign _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'{'            { TokenLCurly _ }
	'}'            { TokenRCurly _ }
	'||'           { TokenDisj _ }
	'&&'           { TokenConj _ }
	'<'            { TokenLThan _ }
	'>'            { TokenGThan _ }
	'=='           { TokenEq _ }
	'!='           { TokenNEq _ }
	'<='           { TokenLEq _ }
	'>='           { TokenGEq _ }
	'->'           { TokenArrow _ }
	'~'            { TokenConcat _ }
	'::'           { TokenAssert _ }
	nl             { TokenNL _ }
	boolType       { TokenBoolType _ }
	intType        { TokenIntType _ }
	stringType     { TokenStringType _ }
	channelType    { TokenChannelType _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_program  rule  0
	Program         rules 1, 2, 3
	Block           rules 4, 5
	OptStatements   rules 6, 7
	Statements      rules 8, 9, 10
	Statement       rules 11, 12, 13, 14, 15
	Type            rules 16, 17, 18, 19, 20
	TypeList        rules 21, 22, 23
	OptReturnType   rules 24, 25
	OptType         rules 26, 27
	Assignment      rule  28
	If              rules 29, 30, 31
	Function        rule  32
	OptArguments    rules 33, 34
	Arguments       rules 35, 36
	OptExprList     rules 37, 38
	ExprList        rules 39, 40
	Expression      rules 41, 42
	Conjunction     rules 43, 44
	Equality        rules 45, 46, 47
	Comparison      rules 48, 49, 50, 51, 52
	Sum             rules 53, 54, 55, 56
	Term            rules 57, 58, 59
	Inversion       rules 60, 61
	Factor          rules 62, 63, 64, 65, 66, 67, 68
	OptNL           rules 69, 70

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_program -> . Program                         (rule 0)

	func           shift, and enter state 3

	Program        goto state 4
	Function       goto state 5

State 1

	Program -> . Function nl OptNL Program              (rule 1)

	func           shift, and enter state 3

	Function       goto state 2

State 2

	Program -> Function . nl OptNL Program              (rule 1)

	nl             shift, and enter state 8


State 3

	Function -> func . funcName OptArguments ')' OptType Block    (rule 32)

	funcName       shift, and enter state 7


State 4

	%start_program -> Program .                         (rule 0)

	%eof           accept


State 5

	Program -> Function . nl OptNL Program              (rule 1)
	Program -> Function . nl OptNL                      (rule 2)
	Program -> Function .                               (rule 3)

	nl             shift, and enter state 6
	%eof           reduce using rule 3


State 6

	Program -> Function nl . OptNL Program              (rule 1)
	Program -> Function nl . OptNL                      (rule 2)

	func           reduce using rule 70
	nl             reduce using rule 70
	%eof           reduce using rule 70

	OptNL          goto state 13

State 7

	Function -> func funcName . OptArguments ')' OptType Block    (rule 32)

	var            shift, and enter state 12
	')'            reduce using rule 34

	OptArguments   goto state 10
	Arguments      goto state 11

State 8

	Program -> Function nl . OptNL Program              (rule 1)


	OptNL          goto state 9

State 9

	Program -> Function nl OptNL . Program              (rule 1)
	OptNL -> OptNL . nl                                 (rule 69)

	func           shift, and enter state 3
	nl             shift, and enter state 15

	Program        goto state 14
	Function       goto state 5

State 10

	Function -> func funcName OptArguments . ')' OptType Block    (rule 32)

	')'            shift, and enter state 17


State 11

	OptArguments -> Arguments .                         (rule 33)

	')'            reduce using rule 33


State 12

	Arguments -> var . ':' Type ',' Arguments           (rule 35)
	Arguments -> var . ':' Type                         (rule 36)

	':'            shift, and enter state 16


State 13

	Program -> Function nl OptNL . Program              (rule 1)
	Program -> Function nl OptNL .                      (rule 2)
	OptNL -> OptNL . nl                                 (rule 69)

	func           shift, and enter state 3
	nl             shift, and enter state 15
	%eof           reduce using rule 2

	Program        goto state 14
	Function       goto state 5

State 14

	Program -> Function nl OptNL Program .              (rule 1)

	%eof           reduce using rule 1


State 15

	OptNL -> OptNL nl .                                 (rule 69)

	let            reduce using rule 69
	if             reduce using rule 69
	var            reduce using rule 69
	int            reduce using rule 69
	stringLiteral  reduce using rule 69
	bool           reduce using rule 69
	return         reduce using rule 69
	func           reduce using rule 69
	funcName       reduce using rule 69
	'!'            reduce using rule 69
	'('            reduce using rule 69
	'}'            reduce using rule 69
	nl             reduce using rule 69
	%eof           reduce using rule 69


State 16

	Arguments -> var ':' . Type ',' Arguments           (rule 35)
	Arguments -> var ':' . Type                         (rule 36)

	func           shift, and enter state 21
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25

	Type           goto state 20

State 17

	Function -> func funcName OptArguments ')' . OptType Block    (rule 32)

	var            reduce using rule 27
	int            reduce using rule 27
	stringLiteral  reduce using rule 27
	bool           reduce using rule 27
	funcName       reduce using rule 27
	':'            shift, and enter state 19
	'!'            reduce using rule 27
	'('            reduce using rule 27
	'{'            reduce using rule 27

	OptType        goto state 18

State 18

	Function -> func funcName OptArguments ')' OptType . Block    (rule 32)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'{'            shift, and enter state 47

	Block          goto state 31
	Expression     goto state 32
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 19

	OptType -> ':' . Type                               (rule 26)

	func           shift, and enter state 21
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25

	Type           goto state 30

State 20

	Arguments -> var ':' Type . ',' Arguments           (rule 35)
	Arguments -> var ':' Type .                         (rule 36)

	','            shift, and enter state 29
	')'            reduce using rule 36


State 21

	Type -> func . TypeList OptReturnType               (rule 20)

	else           reduce using rule 23
	var            reduce using rule 23
	int            reduce using rule 23
	stringLiteral  reduce using rule 23
	bool           reduce using rule 23
	func           shift, and enter state 21
	funcName       reduce using rule 23
	','            reduce using rule 23
	'!'            reduce using rule 23
	'='            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'||'           reduce using rule 23
	'&&'           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'=='           reduce using rule 23
	'!='           reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'->'           reduce using rule 23
	'~'            reduce using rule 23
	'::'           reduce using rule 23
	nl             reduce using rule 23
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25
	%eof           reduce using rule 23

	Type           goto state 27
	TypeList       goto state 28

State 22

	Type -> boolType .                                  (rule 18)

	else           reduce using rule 18
	var            reduce using rule 18
	int            reduce using rule 18
	stringLiteral  reduce using rule 18
	bool           reduce using rule 18
	funcName       reduce using rule 18
	','            reduce using rule 18
	'!'            reduce using rule 18
	'='            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	'||'           reduce using rule 18
	'&&'           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'=='           reduce using rule 18
	'!='           reduce using rule 18
	'<='           reduce using rule 18
	'>='           reduce using rule 18
	'->'           reduce using rule 18
	'~'            reduce using rule 18
	'::'           reduce using rule 18
	nl             reduce using rule 18
	%eof           reduce using rule 18


State 23

	Type -> intType .                                   (rule 16)

	else           reduce using rule 16
	var            reduce using rule 16
	int            reduce using rule 16
	stringLiteral  reduce using rule 16
	bool           reduce using rule 16
	funcName       reduce using rule 16
	','            reduce using rule 16
	'!'            reduce using rule 16
	'='            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	'||'           reduce using rule 16
	'&&'           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'=='           reduce using rule 16
	'!='           reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'->'           reduce using rule 16
	'~'            reduce using rule 16
	'::'           reduce using rule 16
	nl             reduce using rule 16
	%eof           reduce using rule 16


State 24

	Type -> stringType .                                (rule 17)

	else           reduce using rule 17
	var            reduce using rule 17
	int            reduce using rule 17
	stringLiteral  reduce using rule 17
	bool           reduce using rule 17
	funcName       reduce using rule 17
	','            reduce using rule 17
	'!'            reduce using rule 17
	'='            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	'||'           reduce using rule 17
	'&&'           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'=='           reduce using rule 17
	'!='           reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'->'           reduce using rule 17
	'~'            reduce using rule 17
	'::'           reduce using rule 17
	nl             reduce using rule 17
	%eof           reduce using rule 17


State 25

	Type -> channelType . Type                          (rule 19)

	func           shift, and enter state 21
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25

	Type           goto state 26

State 26

	Type -> channelType Type .                          (rule 19)

	else           reduce using rule 19
	var            reduce using rule 19
	int            reduce using rule 19
	stringLiteral  reduce using rule 19
	bool           reduce using rule 19
	funcName       reduce using rule 19
	','            reduce using rule 19
	'!'            reduce using rule 19
	'='            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	'||'           reduce using rule 19
	'&&'           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'=='           reduce using rule 19
	'!='           reduce using rule 19
	'<='           reduce using rule 19
	'>='           reduce using rule 19
	'->'           reduce using rule 19
	'~'            reduce using rule 19
	'::'           reduce using rule 19
	nl             reduce using rule 19
	%eof           reduce using rule 19


State 27

	TypeList -> Type . ',' TypeList                     (rule 21)
	TypeList -> Type .                                  (rule 22)

	else           reduce using rule 22
	var            reduce using rule 22
	int            reduce using rule 22
	stringLiteral  reduce using rule 22
	bool           reduce using rule 22
	funcName       reduce using rule 22
	','            shift, and enter state 72
			(reduce using rule 22)

	'!'            reduce using rule 22
	'='            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	'||'           reduce using rule 22
	'&&'           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	'=='           reduce using rule 22
	'!='           reduce using rule 22
	'<='           reduce using rule 22
	'>='           reduce using rule 22
	'->'           reduce using rule 22
	'~'            reduce using rule 22
	'::'           reduce using rule 22
	nl             reduce using rule 22
	%eof           reduce using rule 22


State 28

	Type -> func TypeList . OptReturnType               (rule 20)

	else           reduce using rule 25
	var            reduce using rule 25
	int            reduce using rule 25
	stringLiteral  reduce using rule 25
	bool           reduce using rule 25
	funcName       reduce using rule 25
	','            reduce using rule 25
	'!'            reduce using rule 25
	'='            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'||'           reduce using rule 25
	'&&'           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'=='           reduce using rule 25
	'!='           reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'->'           shift, and enter state 71
			(reduce using rule 25)

	'~'            reduce using rule 25
	'::'           reduce using rule 25
	nl             reduce using rule 25
	%eof           reduce using rule 25

	OptReturnType  goto state 70

State 29

	Arguments -> var ':' Type ',' . Arguments           (rule 35)

	var            shift, and enter state 12

	Arguments      goto state 69

State 30

	OptType -> ':' Type .                               (rule 26)

	var            reduce using rule 26
	int            reduce using rule 26
	stringLiteral  reduce using rule 26
	bool           reduce using rule 26
	funcName       reduce using rule 26
	'!'            reduce using rule 26
	'='            reduce using rule 26
	'('            reduce using rule 26
	'{'            reduce using rule 26


State 31

	Function -> func funcName OptArguments ')' OptType Block .    (rule 32)

	'}'            reduce using rule 32
	nl             reduce using rule 32
	%eof           reduce using rule 32


State 32

	Block -> Expression .                               (rule 4)
	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	else           reduce using rule 4
	'}'            reduce using rule 4
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68
	nl             reduce using rule 4
	%eof           reduce using rule 4


State 33

	Expression -> Conjunction .                         (rule 42)
	Conjunction -> Conjunction . '&&' Conjunction       (rule 43)

	else           reduce using rule 42
	','            reduce using rule 42
	')'            reduce using rule 42
	'}'            reduce using rule 42
	'||'           reduce using rule 42
	'&&'           shift, and enter state 66
	'::'           reduce using rule 42
	nl             reduce using rule 42
	%eof           reduce using rule 42


State 34

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)

	else           reduce using rule 44
	','            reduce using rule 44
	')'            reduce using rule 44
	'}'            reduce using rule 44
	'||'           reduce using rule 44
	'&&'           reduce using rule 44
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'=='           shift, and enter state 62
	'!='           shift, and enter state 63
	'<='           shift, and enter state 64
	'>='           shift, and enter state 65
	'::'           reduce using rule 44
	nl             reduce using rule 44
	%eof           reduce using rule 44


State 35

	Equality -> Comparison .                            (rule 47)

	else           reduce using rule 47
	','            reduce using rule 47
	')'            reduce using rule 47
	'}'            reduce using rule 47
	'||'           reduce using rule 47
	'&&'           reduce using rule 47
	'<'            reduce using rule 47
	'>'            reduce using rule 47
	'=='           reduce using rule 47
	'!='           reduce using rule 47
	'<='           reduce using rule 47
	'>='           reduce using rule 47
	'::'           reduce using rule 47
	nl             reduce using rule 47
	%eof           reduce using rule 47


State 36

	Comparison -> Sum .                                 (rule 52)
	Sum -> Sum . '+' Term                               (rule 53)
	Sum -> Sum . '-' Term                               (rule 54)
	Sum -> Sum . '~' Term                               (rule 55)

	else           reduce using rule 52
	','            reduce using rule 52
	'+'            shift, and enter state 57
	'-'            shift, and enter state 58
	')'            reduce using rule 52
	'}'            reduce using rule 52
	'||'           reduce using rule 52
	'&&'           reduce using rule 52
	'<'            reduce using rule 52
	'>'            reduce using rule 52
	'=='           reduce using rule 52
	'!='           reduce using rule 52
	'<='           reduce using rule 52
	'>='           reduce using rule 52
	'~'            shift, and enter state 59
	'::'           reduce using rule 52
	nl             reduce using rule 52
	%eof           reduce using rule 52


State 37

	Sum -> Term .                                       (rule 56)
	Term -> Term . '*' Factor                           (rule 57)
	Term -> Term . '/' Factor                           (rule 58)

	else           reduce using rule 56
	','            reduce using rule 56
	'+'            reduce using rule 56
	'-'            reduce using rule 56
	'*'            shift, and enter state 55
	'/'            shift, and enter state 56
	')'            reduce using rule 56
	'}'            reduce using rule 56
	'||'           reduce using rule 56
	'&&'           reduce using rule 56
	'<'            reduce using rule 56
	'>'            reduce using rule 56
	'=='           reduce using rule 56
	'!='           reduce using rule 56
	'<='           reduce using rule 56
	'>='           reduce using rule 56
	'~'            reduce using rule 56
	'::'           reduce using rule 56
	nl             reduce using rule 56
	%eof           reduce using rule 56


State 38

	Term -> Inversion .                                 (rule 59)

	else           reduce using rule 59
	','            reduce using rule 59
	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	')'            reduce using rule 59
	'}'            reduce using rule 59
	'||'           reduce using rule 59
	'&&'           reduce using rule 59
	'<'            reduce using rule 59
	'>'            reduce using rule 59
	'=='           reduce using rule 59
	'!='           reduce using rule 59
	'<='           reduce using rule 59
	'>='           reduce using rule 59
	'~'            reduce using rule 59
	'::'           reduce using rule 59
	nl             reduce using rule 59
	%eof           reduce using rule 59


State 39

	Inversion -> Factor .                               (rule 61)

	else           reduce using rule 61
	','            reduce using rule 61
	'+'            reduce using rule 61
	'-'            reduce using rule 61
	'*'            reduce using rule 61
	'/'            reduce using rule 61
	')'            reduce using rule 61
	'}'            reduce using rule 61
	'||'           reduce using rule 61
	'&&'           reduce using rule 61
	'<'            reduce using rule 61
	'>'            reduce using rule 61
	'=='           reduce using rule 61
	'!='           reduce using rule 61
	'<='           reduce using rule 61
	'>='           reduce using rule 61
	'~'            reduce using rule 61
	'::'           reduce using rule 61
	nl             reduce using rule 61
	%eof           reduce using rule 61


State 40

	Factor -> var .                                     (rule 62)

	else           reduce using rule 62
	','            reduce using rule 62
	'+'            reduce using rule 62
	'-'            reduce using rule 62
	'*'            reduce using rule 62
	'/'            reduce using rule 62
	')'            reduce using rule 62
	'}'            reduce using rule 62
	'||'           reduce using rule 62
	'&&'           reduce using rule 62
	'<'            reduce using rule 62
	'>'            reduce using rule 62
	'=='           reduce using rule 62
	'!='           reduce using rule 62
	'<='           reduce using rule 62
	'>='           reduce using rule 62
	'~'            reduce using rule 62
	'::'           reduce using rule 62
	nl             reduce using rule 62
	%eof           reduce using rule 62


State 41

	Factor -> int .                                     (rule 63)

	else           reduce using rule 63
	','            reduce using rule 63
	'+'            reduce using rule 63
	'-'            reduce using rule 63
	'*'            reduce using rule 63
	'/'            reduce using rule 63
	')'            reduce using rule 63
	'}'            reduce using rule 63
	'||'           reduce using rule 63
	'&&'           reduce using rule 63
	'<'            reduce using rule 63
	'>'            reduce using rule 63
	'=='           reduce using rule 63
	'!='           reduce using rule 63
	'<='           reduce using rule 63
	'>='           reduce using rule 63
	'~'            reduce using rule 63
	'::'           reduce using rule 63
	nl             reduce using rule 63
	%eof           reduce using rule 63


State 42

	Factor -> stringLiteral .                           (rule 65)

	else           reduce using rule 65
	','            reduce using rule 65
	'+'            reduce using rule 65
	'-'            reduce using rule 65
	'*'            reduce using rule 65
	'/'            reduce using rule 65
	')'            reduce using rule 65
	'}'            reduce using rule 65
	'||'           reduce using rule 65
	'&&'           reduce using rule 65
	'<'            reduce using rule 65
	'>'            reduce using rule 65
	'=='           reduce using rule 65
	'!='           reduce using rule 65
	'<='           reduce using rule 65
	'>='           reduce using rule 65
	'~'            reduce using rule 65
	'::'           reduce using rule 65
	nl             reduce using rule 65
	%eof           reduce using rule 65


State 43

	Factor -> bool .                                    (rule 64)

	else           reduce using rule 64
	','            reduce using rule 64
	'+'            reduce using rule 64
	'-'            reduce using rule 64
	'*'            reduce using rule 64
	'/'            reduce using rule 64
	')'            reduce using rule 64
	'}'            reduce using rule 64
	'||'           reduce using rule 64
	'&&'           reduce using rule 64
	'<'            reduce using rule 64
	'>'            reduce using rule 64
	'=='           reduce using rule 64
	'!='           reduce using rule 64
	'<='           reduce using rule 64
	'>='           reduce using rule 64
	'~'            reduce using rule 64
	'::'           reduce using rule 64
	nl             reduce using rule 64
	%eof           reduce using rule 64


State 44

	Factor -> funcName . OptExprList ')'                (rule 67)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	')'            reduce using rule 38

	OptExprList    goto state 52
	ExprList       goto state 53
	Expression     goto state 54
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 45

	Inversion -> '!' . Inversion                        (rule 60)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 51
	Factor         goto state 39

State 46

	Factor -> '(' . Expression ')'                      (rule 66)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 49
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 47

	Block -> '{' . OptNL OptStatements '}'              (rule 5)

	let            reduce using rule 70
	if             reduce using rule 70
	var            reduce using rule 70
	int            reduce using rule 70
	stringLiteral  reduce using rule 70
	bool           reduce using rule 70
	return         reduce using rule 70
	func           reduce using rule 70
	funcName       reduce using rule 70
	'!'            reduce using rule 70
	'('            reduce using rule 70
	'}'            reduce using rule 70
	nl             reduce using rule 70

	OptNL          goto state 48

State 48

	Block -> '{' OptNL . OptStatements '}'              (rule 5)
	OptNL -> OptNL . nl                                 (rule 69)

	let            shift, and enter state 99
	if             shift, and enter state 100
	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	return         shift, and enter state 101
	func           shift, and enter state 3
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'}'            reduce using rule 7
	nl             shift, and enter state 15

	OptStatements  goto state 92
	Statements     goto state 93
	Statement      goto state 94
	Assignment     goto state 95
	If             goto state 96
	Function       goto state 97
	Expression     goto state 98
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 49

	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> '(' Expression . ')'                      (rule 66)
	Factor -> Expression . '::' Type                    (rule 68)

	')'            shift, and enter state 91
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68


State 50

	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	'||'           shift, and enter state 67
	'::'           shift, and enter state 68


State 51

	Term -> Inversion .                                 (rule 59)
	Inversion -> '!' Inversion .                        (rule 60)

	else           reduce using rule 60
	','            reduce using rule 60
	'+'            reduce using rule 60
			(reduce using rule 59)

	'-'            reduce using rule 60
			(reduce using rule 59)

	'*'            reduce using rule 60
			(reduce using rule 59)

	'/'            reduce using rule 60
			(reduce using rule 59)

	')'            reduce using rule 60
	'}'            reduce using rule 60
	'||'           reduce using rule 60
			(reduce using rule 59)

	'&&'           reduce using rule 60
			(reduce using rule 59)

	'<'            reduce using rule 60
			(reduce using rule 59)

	'>'            reduce using rule 60
			(reduce using rule 59)

	'=='           reduce using rule 60
			(reduce using rule 59)

	'!='           reduce using rule 60
			(reduce using rule 59)

	'<='           reduce using rule 60
			(reduce using rule 59)

	'>='           reduce using rule 60
			(reduce using rule 59)

	'~'            reduce using rule 60
			(reduce using rule 59)

	'::'           reduce using rule 60
			(reduce using rule 59)

	nl             reduce using rule 60
	%eof           reduce using rule 60


State 52

	Factor -> funcName OptExprList . ')'                (rule 67)

	')'            shift, and enter state 90


State 53

	OptExprList -> ExprList .                           (rule 37)

	')'            reduce using rule 37


State 54

	ExprList -> Expression . ',' ExprList               (rule 39)
	ExprList -> Expression .                            (rule 40)
	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	','            shift, and enter state 89
	')'            reduce using rule 40
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68


State 55

	Term -> Term '*' . Factor                           (rule 57)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 88

State 56

	Term -> Term '/' . Factor                           (rule 58)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 87

State 57

	Sum -> Sum '+' . Term                               (rule 53)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 86
	Inversion      goto state 38
	Factor         goto state 39

State 58

	Sum -> Sum '-' . Term                               (rule 54)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 85
	Inversion      goto state 38
	Factor         goto state 39

State 59

	Sum -> Sum '~' . Term                               (rule 55)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 84
	Inversion      goto state 38
	Factor         goto state 39

State 60

	Comparison -> Equality '<' . Equality               (rule 48)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 83
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 61

	Comparison -> Equality '>' . Equality               (rule 50)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 82
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 62

	Equality -> Equality '==' . Equality                (rule 45)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 81
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 63

	Equality -> Equality '!=' . Equality                (rule 46)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 80
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 64

	Comparison -> Equality '<=' . Equality              (rule 49)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 79
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 65

	Comparison -> Equality '>=' . Equality              (rule 51)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 33
	Equality       goto state 78
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 66

	Conjunction -> Conjunction '&&' . Conjunction       (rule 43)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 50
	Conjunction    goto state 77
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 67

	Expression -> Expression '||' . Expression          (rule 41)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 76
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 68

	Factor -> Expression '::' . Type                    (rule 68)

	func           shift, and enter state 21
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25

	Type           goto state 75

State 69

	Arguments -> var ':' Type ',' Arguments .           (rule 35)

	')'            reduce using rule 35


State 70

	Type -> func TypeList OptReturnType .               (rule 20)

	else           reduce using rule 20
	var            reduce using rule 20
	int            reduce using rule 20
	stringLiteral  reduce using rule 20
	bool           reduce using rule 20
	funcName       reduce using rule 20
	','            reduce using rule 20
	'!'            reduce using rule 20
	'='            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	'||'           reduce using rule 20
	'&&'           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'=='           reduce using rule 20
	'!='           reduce using rule 20
	'<='           reduce using rule 20
	'>='           reduce using rule 20
	'->'           reduce using rule 20
	'~'            reduce using rule 20
	'::'           reduce using rule 20
	nl             reduce using rule 20
	%eof           reduce using rule 20


State 71

	OptReturnType -> '->' . Type                        (rule 24)

	func           shift, and enter state 21
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25

	Type           goto state 74

State 72

	TypeList -> Type ',' . TypeList                     (rule 21)

	else           reduce using rule 23
	var            reduce using rule 23
	int            reduce using rule 23
	stringLiteral  reduce using rule 23
	bool           reduce using rule 23
	func           shift, and enter state 21
	funcName       reduce using rule 23
	','            reduce using rule 23
	'!'            reduce using rule 23
	'='            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'||'           reduce using rule 23
	'&&'           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'=='           reduce using rule 23
	'!='           reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'->'           reduce using rule 23
	'~'            reduce using rule 23
	'::'           reduce using rule 23
	nl             reduce using rule 23
	boolType       shift, and enter state 22
	intType        shift, and enter state 23
	stringType     shift, and enter state 24
	channelType    shift, and enter state 25
	%eof           reduce using rule 23

	Type           goto state 27
	TypeList       goto state 73

State 73

	TypeList -> Type ',' TypeList .                     (rule 21)

	else           reduce using rule 21
	var            reduce using rule 21
	int            reduce using rule 21
	stringLiteral  reduce using rule 21
	bool           reduce using rule 21
	funcName       reduce using rule 21
	','            reduce using rule 21
	'!'            reduce using rule 21
	'='            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	'||'           reduce using rule 21
	'&&'           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'=='           reduce using rule 21
	'!='           reduce using rule 21
	'<='           reduce using rule 21
	'>='           reduce using rule 21
	'->'           reduce using rule 21
	'~'            reduce using rule 21
	'::'           reduce using rule 21
	nl             reduce using rule 21
	%eof           reduce using rule 21


State 74

	OptReturnType -> '->' Type .                        (rule 24)

	else           reduce using rule 24
	var            reduce using rule 24
	int            reduce using rule 24
	stringLiteral  reduce using rule 24
	bool           reduce using rule 24
	funcName       reduce using rule 24
	','            reduce using rule 24
	'!'            reduce using rule 24
	'='            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'||'           reduce using rule 24
	'&&'           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'=='           reduce using rule 24
	'!='           reduce using rule 24
	'<='           reduce using rule 24
	'>='           reduce using rule 24
	'->'           reduce using rule 24
	'~'            reduce using rule 24
	'::'           reduce using rule 24
	nl             reduce using rule 24
	%eof           reduce using rule 24


State 75

	Factor -> Expression '::' Type .                    (rule 68)

	else           reduce using rule 68
	','            reduce using rule 68
	'+'            reduce using rule 68
	'-'            reduce using rule 68
	'*'            reduce using rule 68
	'/'            reduce using rule 68
	')'            reduce using rule 68
	'}'            reduce using rule 68
	'||'           reduce using rule 68
	'&&'           reduce using rule 68
	'<'            reduce using rule 68
	'>'            reduce using rule 68
	'=='           reduce using rule 68
	'!='           reduce using rule 68
	'<='           reduce using rule 68
	'>='           reduce using rule 68
	'~'            reduce using rule 68
	'::'           reduce using rule 68
	nl             reduce using rule 68
	%eof           reduce using rule 68


State 76

	Expression -> Expression . '||' Expression          (rule 41)
	Expression -> Expression '||' Expression .          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	else           reduce using rule 41
	','            reduce using rule 41
	')'            reduce using rule 41
	'}'            reduce using rule 41
	'||'           shift, and enter state 67
			(reduce using rule 41)

	'::'           shift, and enter state 68
			(reduce using rule 41)

	nl             reduce using rule 41
	%eof           reduce using rule 41


State 77

	Expression -> Conjunction .                         (rule 42)
	Conjunction -> Conjunction . '&&' Conjunction       (rule 43)
	Conjunction -> Conjunction '&&' Conjunction .       (rule 43)

	else           reduce using rule 43
	','            reduce using rule 43
	')'            reduce using rule 43
	'}'            reduce using rule 43
	'||'           reduce using rule 43
			(reduce using rule 42)

	'&&'           shift, and enter state 66
			(reduce using rule 43)

	'::'           reduce using rule 43
			(reduce using rule 42)

	nl             reduce using rule 43
	%eof           reduce using rule 43


State 78

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)
	Comparison -> Equality '>=' Equality .              (rule 51)

	else           reduce using rule 51
	','            reduce using rule 51
	')'            reduce using rule 51
	'}'            reduce using rule 51
	'||'           reduce using rule 51
			(reduce using rule 44)

	'&&'           reduce using rule 51
			(reduce using rule 44)

	'<'            shift, and enter state 60
			(reduce using rule 51)

	'>'            shift, and enter state 61
			(reduce using rule 51)

	'=='           shift, and enter state 62
			(reduce using rule 51)

	'!='           shift, and enter state 63
			(reduce using rule 51)

	'<='           shift, and enter state 64
			(reduce using rule 51)

	'>='           shift, and enter state 65
			(reduce using rule 51)

	'::'           reduce using rule 51
			(reduce using rule 44)

	nl             reduce using rule 51
	%eof           reduce using rule 51


State 79

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality '<=' Equality .              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)

	else           reduce using rule 49
	','            reduce using rule 49
	')'            reduce using rule 49
	'}'            reduce using rule 49
	'||'           reduce using rule 49
			(reduce using rule 44)

	'&&'           reduce using rule 49
			(reduce using rule 44)

	'<'            shift, and enter state 60
			(reduce using rule 49)

	'>'            shift, and enter state 61
			(reduce using rule 49)

	'=='           shift, and enter state 62
			(reduce using rule 49)

	'!='           shift, and enter state 63
			(reduce using rule 49)

	'<='           shift, and enter state 64
			(reduce using rule 49)

	'>='           shift, and enter state 65
			(reduce using rule 49)

	'::'           reduce using rule 49
			(reduce using rule 44)

	nl             reduce using rule 49
	%eof           reduce using rule 49


State 80

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Equality -> Equality '!=' Equality .                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)

	else           reduce using rule 46
	','            reduce using rule 46
	')'            reduce using rule 46
	'}'            reduce using rule 46
	'||'           reduce using rule 46
			(reduce using rule 44)

	'&&'           reduce using rule 46
			(reduce using rule 44)

	'<'            shift, and enter state 60
			(reduce using rule 46)

	'>'            shift, and enter state 61
			(reduce using rule 46)

	'=='           shift, and enter state 62
			(reduce using rule 46)

	'!='           shift, and enter state 63
			(reduce using rule 46)

	'<='           shift, and enter state 64
			(reduce using rule 46)

	'>='           shift, and enter state 65
			(reduce using rule 46)

	'::'           reduce using rule 46
			(reduce using rule 44)

	nl             reduce using rule 46
	%eof           reduce using rule 46


State 81

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality '==' Equality .                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)

	else           reduce using rule 45
	','            reduce using rule 45
	')'            reduce using rule 45
	'}'            reduce using rule 45
	'||'           reduce using rule 45
			(reduce using rule 44)

	'&&'           reduce using rule 45
			(reduce using rule 44)

	'<'            shift, and enter state 60
			(reduce using rule 45)

	'>'            shift, and enter state 61
			(reduce using rule 45)

	'=='           shift, and enter state 62
			(reduce using rule 45)

	'!='           shift, and enter state 63
			(reduce using rule 45)

	'<='           shift, and enter state 64
			(reduce using rule 45)

	'>='           shift, and enter state 65
			(reduce using rule 45)

	'::'           reduce using rule 45
			(reduce using rule 44)

	nl             reduce using rule 45
	%eof           reduce using rule 45


State 82

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality '>' Equality .               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)

	else           reduce using rule 50
	','            reduce using rule 50
	')'            reduce using rule 50
	'}'            reduce using rule 50
	'||'           reduce using rule 50
			(reduce using rule 44)

	'&&'           reduce using rule 50
			(reduce using rule 44)

	'<'            shift, and enter state 60
			(reduce using rule 50)

	'>'            shift, and enter state 61
			(reduce using rule 50)

	'=='           shift, and enter state 62
			(reduce using rule 50)

	'!='           shift, and enter state 63
			(reduce using rule 50)

	'<='           shift, and enter state 64
			(reduce using rule 50)

	'>='           shift, and enter state 65
			(reduce using rule 50)

	'::'           reduce using rule 50
			(reduce using rule 44)

	nl             reduce using rule 50
	%eof           reduce using rule 50


State 83

	Conjunction -> Equality .                           (rule 44)
	Equality -> Equality . '==' Equality                (rule 45)
	Equality -> Equality . '!=' Equality                (rule 46)
	Comparison -> Equality . '<' Equality               (rule 48)
	Comparison -> Equality '<' Equality .               (rule 48)
	Comparison -> Equality . '<=' Equality              (rule 49)
	Comparison -> Equality . '>' Equality               (rule 50)
	Comparison -> Equality . '>=' Equality              (rule 51)

	else           reduce using rule 48
	','            reduce using rule 48
	')'            reduce using rule 48
	'}'            reduce using rule 48
	'||'           reduce using rule 48
			(reduce using rule 44)

	'&&'           reduce using rule 48
			(reduce using rule 44)

	'<'            shift, and enter state 60
			(reduce using rule 48)

	'>'            shift, and enter state 61
			(reduce using rule 48)

	'=='           shift, and enter state 62
			(reduce using rule 48)

	'!='           shift, and enter state 63
			(reduce using rule 48)

	'<='           shift, and enter state 64
			(reduce using rule 48)

	'>='           shift, and enter state 65
			(reduce using rule 48)

	'::'           reduce using rule 48
			(reduce using rule 44)

	nl             reduce using rule 48
	%eof           reduce using rule 48


State 84

	Sum -> Sum '~' Term .                               (rule 55)
	Sum -> Term .                                       (rule 56)
	Term -> Term . '*' Factor                           (rule 57)
	Term -> Term . '/' Factor                           (rule 58)

	else           reduce using rule 55
	','            reduce using rule 55
	'+'            reduce using rule 56
			(reduce using rule 55)

	'-'            reduce using rule 56
			(reduce using rule 55)

	'*'            shift, and enter state 55
	'/'            shift, and enter state 56
	')'            reduce using rule 55
	'}'            reduce using rule 55
	'||'           reduce using rule 56
			(reduce using rule 55)

	'&&'           reduce using rule 56
			(reduce using rule 55)

	'<'            reduce using rule 56
			(reduce using rule 55)

	'>'            reduce using rule 56
			(reduce using rule 55)

	'=='           reduce using rule 56
			(reduce using rule 55)

	'!='           reduce using rule 56
			(reduce using rule 55)

	'<='           reduce using rule 56
			(reduce using rule 55)

	'>='           reduce using rule 56
			(reduce using rule 55)

	'~'            reduce using rule 56
			(reduce using rule 55)

	'::'           reduce using rule 56
			(reduce using rule 55)

	nl             reduce using rule 55
	%eof           reduce using rule 55


State 85

	Sum -> Sum '-' Term .                               (rule 54)
	Sum -> Term .                                       (rule 56)
	Term -> Term . '*' Factor                           (rule 57)
	Term -> Term . '/' Factor                           (rule 58)

	else           reduce using rule 54
	','            reduce using rule 54
	'+'            reduce using rule 56
			(reduce using rule 54)

	'-'            reduce using rule 56
			(reduce using rule 54)

	'*'            shift, and enter state 55
	'/'            shift, and enter state 56
	')'            reduce using rule 54
	'}'            reduce using rule 54
	'||'           reduce using rule 56
			(reduce using rule 54)

	'&&'           reduce using rule 56
			(reduce using rule 54)

	'<'            reduce using rule 56
			(reduce using rule 54)

	'>'            reduce using rule 56
			(reduce using rule 54)

	'=='           reduce using rule 56
			(reduce using rule 54)

	'!='           reduce using rule 56
			(reduce using rule 54)

	'<='           reduce using rule 56
			(reduce using rule 54)

	'>='           reduce using rule 56
			(reduce using rule 54)

	'~'            reduce using rule 56
			(reduce using rule 54)

	'::'           reduce using rule 56
			(reduce using rule 54)

	nl             reduce using rule 54
	%eof           reduce using rule 54


State 86

	Sum -> Sum '+' Term .                               (rule 53)
	Sum -> Term .                                       (rule 56)
	Term -> Term . '*' Factor                           (rule 57)
	Term -> Term . '/' Factor                           (rule 58)

	else           reduce using rule 53
	','            reduce using rule 53
	'+'            reduce using rule 56
			(reduce using rule 53)

	'-'            reduce using rule 56
			(reduce using rule 53)

	'*'            shift, and enter state 55
	'/'            shift, and enter state 56
	')'            reduce using rule 53
	'}'            reduce using rule 53
	'||'           reduce using rule 56
			(reduce using rule 53)

	'&&'           reduce using rule 56
			(reduce using rule 53)

	'<'            reduce using rule 56
			(reduce using rule 53)

	'>'            reduce using rule 56
			(reduce using rule 53)

	'=='           reduce using rule 56
			(reduce using rule 53)

	'!='           reduce using rule 56
			(reduce using rule 53)

	'<='           reduce using rule 56
			(reduce using rule 53)

	'>='           reduce using rule 56
			(reduce using rule 53)

	'~'            reduce using rule 56
			(reduce using rule 53)

	'::'           reduce using rule 56
			(reduce using rule 53)

	nl             reduce using rule 53
	%eof           reduce using rule 53


State 87

	Term -> Term '/' Factor .                           (rule 58)
	Inversion -> Factor .                               (rule 61)

	else           reduce using rule 58
	','            reduce using rule 58
	'+'            reduce using rule 61
			(reduce using rule 58)

	'-'            reduce using rule 61
			(reduce using rule 58)

	'*'            reduce using rule 61
			(reduce using rule 58)

	'/'            reduce using rule 61
			(reduce using rule 58)

	')'            reduce using rule 58
	'}'            reduce using rule 58
	'||'           reduce using rule 61
			(reduce using rule 58)

	'&&'           reduce using rule 61
			(reduce using rule 58)

	'<'            reduce using rule 61
			(reduce using rule 58)

	'>'            reduce using rule 61
			(reduce using rule 58)

	'=='           reduce using rule 61
			(reduce using rule 58)

	'!='           reduce using rule 61
			(reduce using rule 58)

	'<='           reduce using rule 61
			(reduce using rule 58)

	'>='           reduce using rule 61
			(reduce using rule 58)

	'~'            reduce using rule 61
			(reduce using rule 58)

	'::'           reduce using rule 61
			(reduce using rule 58)

	nl             reduce using rule 58
	%eof           reduce using rule 58


State 88

	Term -> Term '*' Factor .                           (rule 57)
	Inversion -> Factor .                               (rule 61)

	else           reduce using rule 57
	','            reduce using rule 57
	'+'            reduce using rule 61
			(reduce using rule 57)

	'-'            reduce using rule 61
			(reduce using rule 57)

	'*'            reduce using rule 61
			(reduce using rule 57)

	'/'            reduce using rule 61
			(reduce using rule 57)

	')'            reduce using rule 57
	'}'            reduce using rule 57
	'||'           reduce using rule 61
			(reduce using rule 57)

	'&&'           reduce using rule 61
			(reduce using rule 57)

	'<'            reduce using rule 61
			(reduce using rule 57)

	'>'            reduce using rule 61
			(reduce using rule 57)

	'=='           reduce using rule 61
			(reduce using rule 57)

	'!='           reduce using rule 61
			(reduce using rule 57)

	'<='           reduce using rule 61
			(reduce using rule 57)

	'>='           reduce using rule 61
			(reduce using rule 57)

	'~'            reduce using rule 61
			(reduce using rule 57)

	'::'           reduce using rule 61
			(reduce using rule 57)

	nl             reduce using rule 57
	%eof           reduce using rule 57


State 89

	ExprList -> Expression ',' . ExprList               (rule 39)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	ExprList       goto state 107
	Expression     goto state 54
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 90

	Factor -> funcName OptExprList ')' .                (rule 67)

	else           reduce using rule 67
	','            reduce using rule 67
	'+'            reduce using rule 67
	'-'            reduce using rule 67
	'*'            reduce using rule 67
	'/'            reduce using rule 67
	')'            reduce using rule 67
	'}'            reduce using rule 67
	'||'           reduce using rule 67
	'&&'           reduce using rule 67
	'<'            reduce using rule 67
	'>'            reduce using rule 67
	'=='           reduce using rule 67
	'!='           reduce using rule 67
	'<='           reduce using rule 67
	'>='           reduce using rule 67
	'~'            reduce using rule 67
	'::'           reduce using rule 67
	nl             reduce using rule 67
	%eof           reduce using rule 67


State 91

	Factor -> '(' Expression ')' .                      (rule 66)

	else           reduce using rule 66
	','            reduce using rule 66
	'+'            reduce using rule 66
	'-'            reduce using rule 66
	'*'            reduce using rule 66
	'/'            reduce using rule 66
	')'            reduce using rule 66
	'}'            reduce using rule 66
	'||'           reduce using rule 66
	'&&'           reduce using rule 66
	'<'            reduce using rule 66
	'>'            reduce using rule 66
	'=='           reduce using rule 66
	'!='           reduce using rule 66
	'<='           reduce using rule 66
	'>='           reduce using rule 66
	'~'            reduce using rule 66
	'::'           reduce using rule 66
	nl             reduce using rule 66
	%eof           reduce using rule 66


State 92

	Block -> '{' OptNL OptStatements . '}'              (rule 5)

	'}'            shift, and enter state 106


State 93

	OptStatements -> Statements .                       (rule 6)

	'}'            reduce using rule 6


State 94

	Statements -> Statement . nl OptNL Statements       (rule 8)
	Statements -> Statement . nl OptNL                  (rule 9)
	Statements -> Statement .                           (rule 10)

	'}'            reduce using rule 10
	nl             shift, and enter state 105


State 95

	Statement -> Assignment .                           (rule 11)

	'}'            reduce using rule 11
	nl             reduce using rule 11


State 96

	Statement -> If .                                   (rule 14)

	'}'            reduce using rule 14
	nl             reduce using rule 14


State 97

	Statement -> Function .                             (rule 13)

	'}'            reduce using rule 13
	nl             reduce using rule 13


State 98

	Statement -> Expression .                           (rule 15)
	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	'}'            reduce using rule 15
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68
	nl             reduce using rule 15


State 99

	Assignment -> let . var OptType '=' Expression      (rule 28)

	var            shift, and enter state 104


State 100

	If -> if . '(' Expression ')' Block else If         (rule 29)
	If -> if . '(' Expression ')' Block else Block      (rule 30)
	If -> if . '(' Expression ')' Block                 (rule 31)

	'('            shift, and enter state 103


State 101

	Statement -> return . Expression                    (rule 12)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 102
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 102

	Statement -> return Expression .                    (rule 12)
	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	'}'            reduce using rule 12
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68
	nl             reduce using rule 12


State 103

	If -> if '(' . Expression ')' Block else If         (rule 29)
	If -> if '(' . Expression ')' Block else Block      (rule 30)
	If -> if '(' . Expression ')' Block                 (rule 31)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 110
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 104

	Assignment -> let var . OptType '=' Expression      (rule 28)

	':'            shift, and enter state 19
	'='            reduce using rule 27

	OptType        goto state 109

State 105

	Statements -> Statement nl . OptNL Statements       (rule 8)
	Statements -> Statement nl . OptNL                  (rule 9)

	let            reduce using rule 70
	if             reduce using rule 70
	var            reduce using rule 70
	int            reduce using rule 70
	stringLiteral  reduce using rule 70
	bool           reduce using rule 70
	return         reduce using rule 70
	func           reduce using rule 70
	funcName       reduce using rule 70
	'!'            reduce using rule 70
	'('            reduce using rule 70
	'}'            reduce using rule 70
	nl             reduce using rule 70

	OptNL          goto state 108

State 106

	Block -> '{' OptNL OptStatements '}' .              (rule 5)

	else           reduce using rule 5
	'}'            reduce using rule 5
	nl             reduce using rule 5
	%eof           reduce using rule 5


State 107

	ExprList -> Expression ',' ExprList .               (rule 39)

	')'            reduce using rule 39


State 108

	Statements -> Statement nl OptNL . Statements       (rule 8)
	Statements -> Statement nl OptNL .                  (rule 9)
	OptNL -> OptNL . nl                                 (rule 69)

	let            shift, and enter state 99
	if             shift, and enter state 100
	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	return         shift, and enter state 101
	func           shift, and enter state 3
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'}'            reduce using rule 9
	nl             shift, and enter state 15

	Statements     goto state 113
	Statement      goto state 94
	Assignment     goto state 95
	If             goto state 96
	Function       goto state 97
	Expression     goto state 98
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 109

	Assignment -> let var OptType . '=' Expression      (rule 28)

	'='            shift, and enter state 112


State 110

	If -> if '(' Expression . ')' Block else If         (rule 29)
	If -> if '(' Expression . ')' Block else Block      (rule 30)
	If -> if '(' Expression . ')' Block                 (rule 31)
	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	')'            shift, and enter state 111
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68


State 111

	If -> if '(' Expression ')' . Block else If         (rule 29)
	If -> if '(' Expression ')' . Block else Block      (rule 30)
	If -> if '(' Expression ')' . Block                 (rule 31)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'{'            shift, and enter state 47

	Block          goto state 115
	Expression     goto state 32
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 112

	Assignment -> let var OptType '=' . Expression      (rule 28)

	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46

	Expression     goto state 114
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 113

	Statements -> Statement nl OptNL Statements .       (rule 8)

	'}'            reduce using rule 8


State 114

	Assignment -> let var OptType '=' Expression .      (rule 28)
	Expression -> Expression . '||' Expression          (rule 41)
	Factor -> Expression . '::' Type                    (rule 68)

	'}'            reduce using rule 28
	'||'           shift, and enter state 67
	'::'           shift, and enter state 68
	nl             reduce using rule 28


State 115

	If -> if '(' Expression ')' Block . else If         (rule 29)
	If -> if '(' Expression ')' Block . else Block      (rule 30)
	If -> if '(' Expression ')' Block .                 (rule 31)

	else           shift, and enter state 116
	'}'            reduce using rule 31
	nl             reduce using rule 31


State 116

	If -> if '(' Expression ')' Block else . If         (rule 29)
	If -> if '(' Expression ')' Block else . Block      (rule 30)

	if             shift, and enter state 100
	var            shift, and enter state 40
	int            shift, and enter state 41
	stringLiteral  shift, and enter state 42
	bool           shift, and enter state 43
	funcName       shift, and enter state 44
	'!'            shift, and enter state 45
	'('            shift, and enter state 46
	'{'            shift, and enter state 47

	Block          goto state 117
	If             goto state 118
	Expression     goto state 32
	Conjunction    goto state 33
	Equality       goto state 34
	Comparison     goto state 35
	Sum            goto state 36
	Term           goto state 37
	Inversion      goto state 38
	Factor         goto state 39

State 117

	If -> if '(' Expression ')' Block else Block .      (rule 30)

	'}'            reduce using rule 30
	nl             reduce using rule 30


State 118

	If -> if '(' Expression ')' Block else If .         (rule 29)

	'}'            reduce using rule 29
	nl             reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 71
Number of terminals: 38
Number of non-terminals: 26
Number of states: 119
