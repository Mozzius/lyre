-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Parser.y
-----------------------------------------------------------------------------

state 14 contains 1 shift/reduce conflicts.
state 32 contains 1 shift/reduce conflicts.
state 33 contains 1 shift/reduce conflicts.
state 54 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_program -> OptStatements                    (0)
	Block -> Expression                                (1)
	Block -> '{' OptNL OptStatements OptNL '}'         (2)
	OptStatements -> Statements                        (3)
	OptStatements ->                                   (4)
	Statements -> Statement nl OptNL Statements        (5)
	Statements -> Statement                            (6)
	Statement -> Assignment                            (7)
	Statement -> return Expression                     (8)
	Statement -> func var '(' OptArguments ')' Block   (9)
	Assignment -> let var '=' Expression               (10)
	OptArguments -> Arguments                          (11)
	OptArguments ->                                    (12)
	Arguments -> var ',' Arguments                     (13)
	Arguments -> var                                   (14)
	Expression -> Expression '||' Expression           (15)
	Expression -> Conjunction                          (16)
	Conjunction -> Conjunction '&&' Conjunction        (17)
	Conjunction -> Inversion                           (18)
	Inversion -> '!' Inversion                         (19)
	Inversion -> Sum                                   (20)
	Sum -> Sum '+' Term                                (21)
	Sum -> Sum '-' Term                                (22)
	Sum -> Term                                        (23)
	Term -> Term '*' Factor                            (24)
	Term -> Term '/' Factor                            (25)
	Term -> Factor                                     (26)
	Factor -> var                                      (27)
	Factor -> int                                      (28)
	Factor -> var '(' ')'                              (29)
	Factor -> '(' Expression ')'                       (30)
	OptNL -> OptNL nl                                  (31)
	OptNL ->                                           (32)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet _ }
	var            { TokenVar _ $$ }
	int            { TokenInt _ $$ }
	return         { TokenReturn _ }
	func           { TokenFunc _ }
	','            { TokenComma _ }
	'!'            { TokenNot _ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'{'            { TokenLCurly _ }
	'}'            { TokenRCurly _ }
	'||'           { TokenDisj _ }
	'&&'           { TokenConj _ }
	nl             { TokenNL _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_program  rule  0
	Block           rules 1, 2
	OptStatements   rules 3, 4
	Statements      rules 5, 6
	Statement       rules 7, 8, 9
	Assignment      rule  10
	OptArguments    rules 11, 12
	Arguments       rules 13, 14
	Expression      rules 15, 16
	Conjunction     rules 17, 18
	Inversion       rules 19, 20
	Sum             rules 21, 22, 23
	Term            rules 24, 25, 26
	Factor          rules 27, 28, 29, 30
	OptNL           rules 31, 32

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 16
	return         shift, and enter state 17
	func           shift, and enter state 18
	%eof           reduce using rule 4

	OptStatements  goto state 12
	Statements     goto state 13
	Statement      goto state 14
	Assignment     goto state 15

State 1


	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 2
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 2

	Block -> Expression .                               (rule 1)
	Expression -> Expression . '||' Expression          (rule 15)

	'}'            reduce using rule 1
	'||'           shift, and enter state 31
	nl             reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expression -> Conjunction .                         (rule 16)
	Conjunction -> Conjunction . '&&' Conjunction       (rule 17)

	')'            reduce using rule 16
	'}'            reduce using rule 16
	'||'           reduce using rule 16
	'&&'           shift, and enter state 30
	nl             reduce using rule 16
	%eof           reduce using rule 16


State 4

	Conjunction -> Inversion .                          (rule 18)

	')'            reduce using rule 18
	'}'            reduce using rule 18
	'||'           reduce using rule 18
	'&&'           reduce using rule 18
	nl             reduce using rule 18
	%eof           reduce using rule 18


State 5

	Inversion -> Sum .                                  (rule 20)
	Sum -> Sum . '+' Term                               (rule 21)
	Sum -> Sum . '-' Term                               (rule 22)

	'+'            shift, and enter state 28
	'-'            shift, and enter state 29
	')'            reduce using rule 20
	'}'            reduce using rule 20
	'||'           reduce using rule 20
	'&&'           reduce using rule 20
	nl             reduce using rule 20
	%eof           reduce using rule 20


State 6

	Sum -> Term .                                       (rule 23)
	Term -> Term . '*' Factor                           (rule 24)
	Term -> Term . '/' Factor                           (rule 25)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            shift, and enter state 26
	'/'            shift, and enter state 27
	')'            reduce using rule 23
	'}'            reduce using rule 23
	'||'           reduce using rule 23
	'&&'           reduce using rule 23
	nl             reduce using rule 23
	%eof           reduce using rule 23


State 7

	Term -> Factor .                                    (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	')'            reduce using rule 26
	'}'            reduce using rule 26
	'||'           reduce using rule 26
	'&&'           reduce using rule 26
	nl             reduce using rule 26
	%eof           reduce using rule 26


State 8

	Factor -> var .                                     (rule 27)
	Factor -> var . '(' ')'                             (rule 29)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'('            shift, and enter state 25
	')'            reduce using rule 27
	'}'            reduce using rule 27
	'||'           reduce using rule 27
	'&&'           reduce using rule 27
	nl             reduce using rule 27
	%eof           reduce using rule 27


State 9

	Factor -> int .                                     (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	')'            reduce using rule 28
	'}'            reduce using rule 28
	'||'           reduce using rule 28
	'&&'           reduce using rule 28
	nl             reduce using rule 28
	%eof           reduce using rule 28


State 10

	Inversion -> '!' . Inversion                        (rule 19)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Inversion      goto state 24
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 11

	Factor -> '(' . Expression ')'                      (rule 30)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 23
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 12

	%start_program -> OptStatements .                   (rule 0)

	%eof           accept


State 13

	OptStatements -> Statements .                       (rule 3)

	'}'            reduce using rule 3
	nl             reduce using rule 3
	%eof           reduce using rule 3


State 14

	Statements -> Statement . nl OptNL Statements       (rule 5)
	Statements -> Statement .                           (rule 6)

	'}'            reduce using rule 6
	nl             shift, and enter state 22
			(reduce using rule 6)

	%eof           reduce using rule 6


State 15

	Statement -> Assignment .                           (rule 7)

	'}'            reduce using rule 7
	nl             reduce using rule 7
	%eof           reduce using rule 7


State 16

	Assignment -> let . var '=' Expression              (rule 10)

	var            shift, and enter state 21


State 17

	Statement -> return . Expression                    (rule 8)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 20
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 18

	Statement -> func . var '(' OptArguments ')' Block    (rule 9)

	var            shift, and enter state 19


State 19

	Statement -> func var . '(' OptArguments ')' Block    (rule 9)

	'('            shift, and enter state 42


State 20

	Statement -> return Expression .                    (rule 8)
	Expression -> Expression . '||' Expression          (rule 15)

	'}'            reduce using rule 8
	'||'           shift, and enter state 31
	nl             reduce using rule 8
	%eof           reduce using rule 8


State 21

	Assignment -> let var . '=' Expression              (rule 10)

	'='            shift, and enter state 41


State 22

	Statements -> Statement nl . OptNL Statements       (rule 5)

	let            reduce using rule 32
	return         reduce using rule 32
	func           reduce using rule 32
	nl             reduce using rule 32

	OptNL          goto state 40

State 23

	Expression -> Expression . '||' Expression          (rule 15)
	Factor -> '(' Expression . ')'                      (rule 30)

	')'            shift, and enter state 39
	'||'           shift, and enter state 31


State 24

	Inversion -> '!' Inversion .                        (rule 19)

	')'            reduce using rule 19
	'}'            reduce using rule 19
	'||'           reduce using rule 19
	'&&'           reduce using rule 19
	nl             reduce using rule 19
	%eof           reduce using rule 19


State 25

	Factor -> var '(' . ')'                             (rule 29)

	')'            shift, and enter state 38


State 26

	Term -> Term '*' . Factor                           (rule 24)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Factor         goto state 37

State 27

	Term -> Term '/' . Factor                           (rule 25)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Factor         goto state 36

State 28

	Sum -> Sum '+' . Term                               (rule 21)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Term           goto state 35
	Factor         goto state 7

State 29

	Sum -> Sum '-' . Term                               (rule 22)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Term           goto state 34
	Factor         goto state 7

State 30

	Conjunction -> Conjunction '&&' . Conjunction       (rule 17)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Conjunction    goto state 33
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 31

	Expression -> Expression '||' . Expression          (rule 15)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 32
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 32

	Expression -> Expression . '||' Expression          (rule 15)
	Expression -> Expression '||' Expression .          (rule 15)

	')'            reduce using rule 15
	'}'            reduce using rule 15
	'||'           shift, and enter state 31
			(reduce using rule 15)

	nl             reduce using rule 15
	%eof           reduce using rule 15


State 33

	Conjunction -> Conjunction . '&&' Conjunction       (rule 17)
	Conjunction -> Conjunction '&&' Conjunction .       (rule 17)

	')'            reduce using rule 17
	'}'            reduce using rule 17
	'||'           reduce using rule 17
	'&&'           shift, and enter state 30
			(reduce using rule 17)

	nl             reduce using rule 17
	%eof           reduce using rule 17


State 34

	Sum -> Sum '-' Term .                               (rule 22)
	Term -> Term . '*' Factor                           (rule 24)
	Term -> Term . '/' Factor                           (rule 25)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            shift, and enter state 26
	'/'            shift, and enter state 27
	')'            reduce using rule 22
	'}'            reduce using rule 22
	'||'           reduce using rule 22
	'&&'           reduce using rule 22
	nl             reduce using rule 22
	%eof           reduce using rule 22


State 35

	Sum -> Sum '+' Term .                               (rule 21)
	Term -> Term . '*' Factor                           (rule 24)
	Term -> Term . '/' Factor                           (rule 25)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            shift, and enter state 26
	'/'            shift, and enter state 27
	')'            reduce using rule 21
	'}'            reduce using rule 21
	'||'           reduce using rule 21
	'&&'           reduce using rule 21
	nl             reduce using rule 21
	%eof           reduce using rule 21


State 36

	Term -> Term '/' Factor .                           (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	')'            reduce using rule 25
	'}'            reduce using rule 25
	'||'           reduce using rule 25
	'&&'           reduce using rule 25
	nl             reduce using rule 25
	%eof           reduce using rule 25


State 37

	Term -> Term '*' Factor .                           (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	')'            reduce using rule 24
	'}'            reduce using rule 24
	'||'           reduce using rule 24
	'&&'           reduce using rule 24
	nl             reduce using rule 24
	%eof           reduce using rule 24


State 38

	Factor -> var '(' ')' .                             (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	'||'           reduce using rule 29
	'&&'           reduce using rule 29
	nl             reduce using rule 29
	%eof           reduce using rule 29


State 39

	Factor -> '(' Expression ')' .                      (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	'||'           reduce using rule 30
	'&&'           reduce using rule 30
	nl             reduce using rule 30
	%eof           reduce using rule 30


State 40

	Statements -> Statement nl OptNL . Statements       (rule 5)
	OptNL -> OptNL . nl                                 (rule 31)

	let            shift, and enter state 16
	return         shift, and enter state 17
	func           shift, and enter state 18
	nl             shift, and enter state 48

	Statements     goto state 47
	Statement      goto state 14
	Assignment     goto state 15

State 41

	Assignment -> let var '=' . Expression              (rule 10)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 46
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 42

	Statement -> func var '(' . OptArguments ')' Block    (rule 9)

	var            shift, and enter state 45
	')'            reduce using rule 12

	OptArguments   goto state 43
	Arguments      goto state 44

State 43

	Statement -> func var '(' OptArguments . ')' Block    (rule 9)

	')'            shift, and enter state 50


State 44

	OptArguments -> Arguments .                         (rule 11)

	')'            reduce using rule 11


State 45

	Arguments -> var . ',' Arguments                    (rule 13)
	Arguments -> var .                                  (rule 14)

	','            shift, and enter state 49
	')'            reduce using rule 14


State 46

	Assignment -> let var '=' Expression .              (rule 10)
	Expression -> Expression . '||' Expression          (rule 15)

	'}'            reduce using rule 10
	'||'           shift, and enter state 31
	nl             reduce using rule 10
	%eof           reduce using rule 10


State 47

	Statements -> Statement nl OptNL Statements .       (rule 5)

	'}'            reduce using rule 5
	nl             reduce using rule 5
	%eof           reduce using rule 5


State 48

	OptNL -> OptNL nl .                                 (rule 31)

	let            reduce using rule 31
	return         reduce using rule 31
	func           reduce using rule 31
	'}'            reduce using rule 31
	nl             reduce using rule 31


State 49

	Arguments -> var ',' . Arguments                    (rule 13)

	var            shift, and enter state 45

	Arguments      goto state 53

State 50

	Statement -> func var '(' OptArguments ')' . Block    (rule 9)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	'{'            shift, and enter state 52

	Block          goto state 51
	Expression     goto state 2
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 51

	Statement -> func var '(' OptArguments ')' Block .    (rule 9)

	'}'            reduce using rule 9
	nl             reduce using rule 9
	%eof           reduce using rule 9


State 52

	Block -> '{' . OptNL OptStatements OptNL '}'        (rule 2)

	let            reduce using rule 32
	return         reduce using rule 32
	func           reduce using rule 32
	'}'            reduce using rule 32
	nl             reduce using rule 32

	OptNL          goto state 54

State 53

	Arguments -> var ',' Arguments .                    (rule 13)

	')'            reduce using rule 13


State 54

	Block -> '{' OptNL . OptStatements OptNL '}'        (rule 2)
	OptNL -> OptNL . nl                                 (rule 31)

	let            shift, and enter state 16
	return         shift, and enter state 17
	func           shift, and enter state 18
	'}'            reduce using rule 4
	nl             shift, and enter state 48
			(reduce using rule 4)


	OptStatements  goto state 55
	Statements     goto state 13
	Statement      goto state 14
	Assignment     goto state 15

State 55

	Block -> '{' OptNL OptStatements . OptNL '}'        (rule 2)

	'}'            reduce using rule 32
	nl             reduce using rule 32

	OptNL          goto state 56

State 56

	Block -> '{' OptNL OptStatements OptNL . '}'        (rule 2)
	OptNL -> OptNL . nl                                 (rule 31)

	'}'            shift, and enter state 57
	nl             shift, and enter state 48


State 57

	Block -> '{' OptNL OptStatements OptNL '}' .        (rule 2)

	'}'            reduce using rule 2
	nl             reduce using rule 2
	%eof           reduce using rule 2


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 33
Number of terminals: 19
Number of non-terminals: 15
Number of states: 58
