-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Parser.y
-----------------------------------------------------------------------------

state 14 contains 1 shift/reduce conflicts.
state 35 contains 1 shift/reduce conflicts.
state 36 contains 1 shift/reduce conflicts.
state 59 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_program -> OptStatements                    (0)
	Block -> Expression                                (1)
	Block -> '{' OptNL OptStatements OptNL '}'         (2)
	OptStatements -> Statements                        (3)
	OptStatements ->                                   (4)
	Statements -> Statement nl OptNL Statements        (5)
	Statements -> Statement                            (6)
	Statement -> Assignment                            (7)
	Statement -> return Expression                     (8)
	Statement -> func var '(' OptArguments ')' Block   (9)
	Statement -> funccall OptExprList ')'              (10)
	Assignment -> let var '=' Expression               (11)
	OptArguments -> Arguments                          (12)
	OptArguments ->                                    (13)
	Arguments -> var ',' Arguments                     (14)
	Arguments -> var                                   (15)
	OptExprList -> ExprList                            (16)
	OptExprList ->                                     (17)
	ExprList -> Expression ',' ExprList                (18)
	ExprList -> Expression                             (19)
	Expression -> Expression '||' Expression           (20)
	Expression -> Conjunction                          (21)
	Conjunction -> Conjunction '&&' Conjunction        (22)
	Conjunction -> Inversion                           (23)
	Inversion -> '!' Inversion                         (24)
	Inversion -> Sum                                   (25)
	Sum -> Sum '+' Term                                (26)
	Sum -> Sum '-' Term                                (27)
	Sum -> Term                                        (28)
	Term -> Term '*' Factor                            (29)
	Term -> Term '/' Factor                            (30)
	Term -> Factor                                     (31)
	Factor -> var                                      (32)
	Factor -> int                                      (33)
	Factor -> '(' Expression ')'                       (34)
	OptNL -> OptNL nl                                  (35)
	OptNL ->                                           (36)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet _ }
	var            { TokenVar _ $$ }
	int            { TokenInt _ $$ }
	return         { TokenReturn _ }
	func           { TokenFunc _ }
	funccall       { TokenFuncCall _ $$ }
	','            { TokenComma _ }
	'!'            { TokenNot _ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'{'            { TokenLCurly _ }
	'}'            { TokenRCurly _ }
	'||'           { TokenDisj _ }
	'&&'           { TokenConj _ }
	nl             { TokenNL _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_program  rule  0
	Block           rules 1, 2
	OptStatements   rules 3, 4
	Statements      rules 5, 6
	Statement       rules 7, 8, 9, 10
	Assignment      rule  11
	OptArguments    rules 12, 13
	Arguments       rules 14, 15
	OptExprList     rules 16, 17
	ExprList        rules 18, 19
	Expression      rules 20, 21
	Conjunction     rules 22, 23
	Inversion       rules 24, 25
	Sum             rules 26, 27, 28
	Term            rules 29, 30, 31
	Factor          rules 32, 33, 34
	OptNL           rules 35, 36

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 16
	return         shift, and enter state 17
	func           shift, and enter state 18
	funccall       shift, and enter state 19
	%eof           reduce using rule 4

	OptStatements  goto state 12
	Statements     goto state 13
	Statement      goto state 14
	Assignment     goto state 15

State 1


	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 2
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 2

	Block -> Expression .                               (rule 1)
	Expression -> Expression . '||' Expression          (rule 20)

	'}'            reduce using rule 1
	'||'           shift, and enter state 34
	nl             reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expression -> Conjunction .                         (rule 21)
	Conjunction -> Conjunction . '&&' Conjunction       (rule 22)

	','            reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	'||'           reduce using rule 21
	'&&'           shift, and enter state 33
	nl             reduce using rule 21
	%eof           reduce using rule 21


State 4

	Conjunction -> Inversion .                          (rule 23)

	','            reduce using rule 23
	')'            reduce using rule 23
	'}'            reduce using rule 23
	'||'           reduce using rule 23
	'&&'           reduce using rule 23
	nl             reduce using rule 23
	%eof           reduce using rule 23


State 5

	Inversion -> Sum .                                  (rule 25)
	Sum -> Sum . '+' Term                               (rule 26)
	Sum -> Sum . '-' Term                               (rule 27)

	','            reduce using rule 25
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	')'            reduce using rule 25
	'}'            reduce using rule 25
	'||'           reduce using rule 25
	'&&'           reduce using rule 25
	nl             reduce using rule 25
	%eof           reduce using rule 25


State 6

	Sum -> Term .                                       (rule 28)
	Term -> Term . '*' Factor                           (rule 29)
	Term -> Term . '/' Factor                           (rule 30)

	','            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	')'            reduce using rule 28
	'}'            reduce using rule 28
	'||'           reduce using rule 28
	'&&'           reduce using rule 28
	nl             reduce using rule 28
	%eof           reduce using rule 28


State 7

	Term -> Factor .                                    (rule 31)

	','            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	'||'           reduce using rule 31
	'&&'           reduce using rule 31
	nl             reduce using rule 31
	%eof           reduce using rule 31


State 8

	Factor -> var .                                     (rule 32)

	','            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	'||'           reduce using rule 32
	'&&'           reduce using rule 32
	nl             reduce using rule 32
	%eof           reduce using rule 32


State 9

	Factor -> int .                                     (rule 33)

	','            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	')'            reduce using rule 33
	'}'            reduce using rule 33
	'||'           reduce using rule 33
	'&&'           reduce using rule 33
	nl             reduce using rule 33
	%eof           reduce using rule 33


State 10

	Inversion -> '!' . Inversion                        (rule 24)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Inversion      goto state 28
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 11

	Factor -> '(' . Expression ')'                      (rule 34)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 27
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 12

	%start_program -> OptStatements .                   (rule 0)

	%eof           accept


State 13

	OptStatements -> Statements .                       (rule 3)

	'}'            reduce using rule 3
	nl             reduce using rule 3
	%eof           reduce using rule 3


State 14

	Statements -> Statement . nl OptNL Statements       (rule 5)
	Statements -> Statement .                           (rule 6)

	'}'            reduce using rule 6
	nl             shift, and enter state 26
			(reduce using rule 6)

	%eof           reduce using rule 6


State 15

	Statement -> Assignment .                           (rule 7)

	'}'            reduce using rule 7
	nl             reduce using rule 7
	%eof           reduce using rule 7


State 16

	Assignment -> let . var '=' Expression              (rule 11)

	var            shift, and enter state 25


State 17

	Statement -> return . Expression                    (rule 8)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 24
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 18

	Statement -> func . var '(' OptArguments ')' Block    (rule 9)

	var            shift, and enter state 23


State 19

	Statement -> funccall . OptExprList ')'             (rule 10)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	')'            reduce using rule 17

	OptExprList    goto state 20
	ExprList       goto state 21
	Expression     goto state 22
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 20

	Statement -> funccall OptExprList . ')'             (rule 10)

	')'            shift, and enter state 46


State 21

	OptExprList -> ExprList .                           (rule 16)

	')'            reduce using rule 16


State 22

	ExprList -> Expression . ',' ExprList               (rule 18)
	ExprList -> Expression .                            (rule 19)
	Expression -> Expression . '||' Expression          (rule 20)

	','            shift, and enter state 45
	')'            reduce using rule 19
	'||'           shift, and enter state 34


State 23

	Statement -> func var . '(' OptArguments ')' Block    (rule 9)

	'('            shift, and enter state 44


State 24

	Statement -> return Expression .                    (rule 8)
	Expression -> Expression . '||' Expression          (rule 20)

	'}'            reduce using rule 8
	'||'           shift, and enter state 34
	nl             reduce using rule 8
	%eof           reduce using rule 8


State 25

	Assignment -> let var . '=' Expression              (rule 11)

	'='            shift, and enter state 43


State 26

	Statements -> Statement nl . OptNL Statements       (rule 5)

	let            reduce using rule 36
	return         reduce using rule 36
	func           reduce using rule 36
	funccall       reduce using rule 36
	nl             reduce using rule 36

	OptNL          goto state 42

State 27

	Expression -> Expression . '||' Expression          (rule 20)
	Factor -> '(' Expression . ')'                      (rule 34)

	')'            shift, and enter state 41
	'||'           shift, and enter state 34


State 28

	Inversion -> '!' Inversion .                        (rule 24)

	','            reduce using rule 24
	')'            reduce using rule 24
	'}'            reduce using rule 24
	'||'           reduce using rule 24
	'&&'           reduce using rule 24
	nl             reduce using rule 24
	%eof           reduce using rule 24


State 29

	Term -> Term '*' . Factor                           (rule 29)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Factor         goto state 40

State 30

	Term -> Term '/' . Factor                           (rule 30)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Factor         goto state 39

State 31

	Sum -> Sum '+' . Term                               (rule 26)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Term           goto state 38
	Factor         goto state 7

State 32

	Sum -> Sum '-' . Term                               (rule 27)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'('            shift, and enter state 11

	Term           goto state 37
	Factor         goto state 7

State 33

	Conjunction -> Conjunction '&&' . Conjunction       (rule 22)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Conjunction    goto state 36
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 34

	Expression -> Expression '||' . Expression          (rule 20)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 35
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 35

	Expression -> Expression . '||' Expression          (rule 20)
	Expression -> Expression '||' Expression .          (rule 20)

	','            reduce using rule 20
	')'            reduce using rule 20
	'}'            reduce using rule 20
	'||'           shift, and enter state 34
			(reduce using rule 20)

	nl             reduce using rule 20
	%eof           reduce using rule 20


State 36

	Conjunction -> Conjunction . '&&' Conjunction       (rule 22)
	Conjunction -> Conjunction '&&' Conjunction .       (rule 22)

	','            reduce using rule 22
	')'            reduce using rule 22
	'}'            reduce using rule 22
	'||'           reduce using rule 22
	'&&'           shift, and enter state 33
			(reduce using rule 22)

	nl             reduce using rule 22
	%eof           reduce using rule 22


State 37

	Sum -> Sum '-' Term .                               (rule 27)
	Term -> Term . '*' Factor                           (rule 29)
	Term -> Term . '/' Factor                           (rule 30)

	','            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	')'            reduce using rule 27
	'}'            reduce using rule 27
	'||'           reduce using rule 27
	'&&'           reduce using rule 27
	nl             reduce using rule 27
	%eof           reduce using rule 27


State 38

	Sum -> Sum '+' Term .                               (rule 26)
	Term -> Term . '*' Factor                           (rule 29)
	Term -> Term . '/' Factor                           (rule 30)

	','            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	')'            reduce using rule 26
	'}'            reduce using rule 26
	'||'           reduce using rule 26
	'&&'           reduce using rule 26
	nl             reduce using rule 26
	%eof           reduce using rule 26


State 39

	Term -> Term '/' Factor .                           (rule 30)

	','            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	'||'           reduce using rule 30
	'&&'           reduce using rule 30
	nl             reduce using rule 30
	%eof           reduce using rule 30


State 40

	Term -> Term '*' Factor .                           (rule 29)

	','            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	'||'           reduce using rule 29
	'&&'           reduce using rule 29
	nl             reduce using rule 29
	%eof           reduce using rule 29


State 41

	Factor -> '(' Expression ')' .                      (rule 34)

	','            reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	')'            reduce using rule 34
	'}'            reduce using rule 34
	'||'           reduce using rule 34
	'&&'           reduce using rule 34
	nl             reduce using rule 34
	%eof           reduce using rule 34


State 42

	Statements -> Statement nl OptNL . Statements       (rule 5)
	OptNL -> OptNL . nl                                 (rule 35)

	let            shift, and enter state 16
	return         shift, and enter state 17
	func           shift, and enter state 18
	funccall       shift, and enter state 19
	nl             shift, and enter state 53

	Statements     goto state 52
	Statement      goto state 14
	Assignment     goto state 15

State 43

	Assignment -> let var '=' . Expression              (rule 11)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 51
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 44

	Statement -> func var '(' . OptArguments ')' Block    (rule 9)

	var            shift, and enter state 50
	')'            reduce using rule 13

	OptArguments   goto state 48
	Arguments      goto state 49

State 45

	ExprList -> Expression ',' . ExprList               (rule 18)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11

	ExprList       goto state 47
	Expression     goto state 22
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 46

	Statement -> funccall OptExprList ')' .             (rule 10)

	'}'            reduce using rule 10
	nl             reduce using rule 10
	%eof           reduce using rule 10


State 47

	ExprList -> Expression ',' ExprList .               (rule 18)

	')'            reduce using rule 18


State 48

	Statement -> func var '(' OptArguments . ')' Block    (rule 9)

	')'            shift, and enter state 55


State 49

	OptArguments -> Arguments .                         (rule 12)

	')'            reduce using rule 12


State 50

	Arguments -> var . ',' Arguments                    (rule 14)
	Arguments -> var .                                  (rule 15)

	','            shift, and enter state 54
	')'            reduce using rule 15


State 51

	Assignment -> let var '=' Expression .              (rule 11)
	Expression -> Expression . '||' Expression          (rule 20)

	'}'            reduce using rule 11
	'||'           shift, and enter state 34
	nl             reduce using rule 11
	%eof           reduce using rule 11


State 52

	Statements -> Statement nl OptNL Statements .       (rule 5)

	'}'            reduce using rule 5
	nl             reduce using rule 5
	%eof           reduce using rule 5


State 53

	OptNL -> OptNL nl .                                 (rule 35)

	let            reduce using rule 35
	return         reduce using rule 35
	func           reduce using rule 35
	funccall       reduce using rule 35
	'}'            reduce using rule 35
	nl             reduce using rule 35


State 54

	Arguments -> var ',' . Arguments                    (rule 14)

	var            shift, and enter state 50

	Arguments      goto state 58

State 55

	Statement -> func var '(' OptArguments ')' . Block    (rule 9)

	var            shift, and enter state 8
	int            shift, and enter state 9
	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	'{'            shift, and enter state 57

	Block          goto state 56
	Expression     goto state 2
	Conjunction    goto state 3
	Inversion      goto state 4
	Sum            goto state 5
	Term           goto state 6
	Factor         goto state 7

State 56

	Statement -> func var '(' OptArguments ')' Block .    (rule 9)

	'}'            reduce using rule 9
	nl             reduce using rule 9
	%eof           reduce using rule 9


State 57

	Block -> '{' . OptNL OptStatements OptNL '}'        (rule 2)

	let            reduce using rule 36
	return         reduce using rule 36
	func           reduce using rule 36
	funccall       reduce using rule 36
	'}'            reduce using rule 36
	nl             reduce using rule 36

	OptNL          goto state 59

State 58

	Arguments -> var ',' Arguments .                    (rule 14)

	')'            reduce using rule 14


State 59

	Block -> '{' OptNL . OptStatements OptNL '}'        (rule 2)
	OptNL -> OptNL . nl                                 (rule 35)

	let            shift, and enter state 16
	return         shift, and enter state 17
	func           shift, and enter state 18
	funccall       shift, and enter state 19
	'}'            reduce using rule 4
	nl             shift, and enter state 53
			(reduce using rule 4)


	OptStatements  goto state 60
	Statements     goto state 13
	Statement      goto state 14
	Assignment     goto state 15

State 60

	Block -> '{' OptNL OptStatements . OptNL '}'        (rule 2)

	'}'            reduce using rule 36
	nl             reduce using rule 36

	OptNL          goto state 61

State 61

	Block -> '{' OptNL OptStatements OptNL . '}'        (rule 2)
	OptNL -> OptNL . nl                                 (rule 35)

	'}'            shift, and enter state 62
	nl             shift, and enter state 53


State 62

	Block -> '{' OptNL OptStatements OptNL '}' .        (rule 2)

	'}'            reduce using rule 2
	nl             reduce using rule 2
	%eof           reduce using rule 2


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 37
Number of terminals: 20
Number of non-terminals: 17
Number of states: 63
