// comment

// new :: Chan a
// recv :: Chan a -> IO a
// send :: a -> Chan a -> IO ()

// spawn : (Channel s -> ()) -> Channel (Dual s)


func repeatStr(string s, number n) -> string {
  if (n > 0) {
    // is this the best string concatination method?
    return s + repeatStr(s, n-1)
  } else {
    return s
  }
}


type basicWorker (Channel s -> ()) -> Channel (Dual s)

worker helloWorldWorker(chan) implements basicWorker  {
  while (true) {
    // chan.send() ?
    // chan<-data  ? go style
    // something else?
    // send(chan, data) ?
    recv(chan)
    send(chan, "Hello World!")
  }
}

// of type Channel (Dual s)
chan = spawn(stringRepeatingWorker)
send(chan)
print(recv(chan))

(Exp (Constr (List (LL [Exp (Constr (Lit (LInt 97)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 97)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 97)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 97)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 97)))] (Exp (Constr (List (L [Exp (Constr (Lit (LInt 97)))]))))))))))))))))))))))))))
(Exp (Constr (List (LL [Exp (Constr (Lit (LInt 104)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 101)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 108)))] (Exp (Constr (List (LL [Exp (Constr (Lit (LInt 108)))] (Exp (Constr (List (L [Exp (Constr (Lit (LInt 111)))]))))))))))))))))))))